{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"TPU","colab":{"name":"seminar gan.ipynb\"","provenance":[{"file_id":"1TsrXHblpyQKgdeerxSzdUndloKEIdge5","timestamp":1609416081333}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.5"}},"cells":[{"cell_type":"code","metadata":{"id":"SXn1O59KHSjS"},"source":["from keras.datasets import mnist\n","from keras.layers import Input, Dense, Reshape, Flatten, Dropout\n","from keras.layers import BatchNormalization, Activation, ZeroPadding2D\n","from keras.layers.advanced_activations import LeakyReLU\n","from keras.layers.convolutional import UpSampling2D, Conv2D\n","from keras.models import Sequential, Model\n","from keras.optimizers import Adam\n","\n","import matplotlib.pyplot as plt\n","\n","import sys\n","\n","import numpy as np"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qW1bz9alzJTd"},"source":["для развлечений:\n","[dreamer.py](https://github.com/samim23/DeepDreamAnim)"]},{"cell_type":"markdown","metadata":{"id":"bAurW_43ka0n"},"source":["Реализация GAN'а ниже взята [отсюда](https://github.com/eriklindernoren/Keras-GAN)<br />\n","Ее вывод будет сохраняться в папку images. <br \\> "]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"g8OtaLUdrev_","executionInfo":{"status":"ok","timestamp":1609416229685,"user_tz":-180,"elapsed":2726,"user":{"displayName":"Владимир Четвериков","photoUrl":"","userId":"14128665642018974813"}},"outputId":"e5f5dbeb-fa28-464f-ea7f-300007ce4856"},"source":["from google.colab import drive\r\n","drive.mount('/content/gdrive', force_remount=True)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/gdrive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zJQy9XB9rrK9","executionInfo":{"status":"ok","timestamp":1609416251116,"user_tz":-180,"elapsed":579,"user":{"displayName":"Владимир Четвериков","photoUrl":"","userId":"14128665642018974813"}},"outputId":"0b0f393e-ad08-4b07-9f5c-5bc2f54b4613"},"source":["!ls /content/gdrive/MyDrive/Colab\\ Notebooks/images"],"execution_count":null,"outputs":[{"output_type":"stream","text":["dancing.jpg  lisa_output_size.png  output_size.png\n","lisa.jpg     output.png\t\t   picasso.jpg\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ccCld37tHfvs"},"source":["\r\n","!mkdir gan"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Vpd2LRTeHSjt"},"source":["class GAN():\n","    def __init__(self):\n","        self.img_rows = 28\n","        self.img_cols = 28\n","        self.channels = 1\n","        self.img_shape = (self.img_rows, self.img_cols, self.channels)\n","        self.latent_dim = 100\n","\n","        optimizer = Adam(0.0002, 0.5)\n","\n","        # Build and compile the discriminator\n","        self.discriminator = self.build_discriminator()\n","        self.discriminator.compile(loss='binary_crossentropy',\n","            optimizer=optimizer,\n","            metrics=['accuracy'])\n","\n","        # Build the generator\n","        self.generator = self.build_generator()\n","\n","        # The generator takes noise as input and generates imgs\n","        z = Input(shape=(self.latent_dim,))\n","        img = self.generator(z)\n","\n","        # For the combined model we will only train the generator\n","        self.discriminator.trainable = False\n","\n","        # The discriminator takes generated images as input and determines validity\n","        validity = self.discriminator(img)\n","\n","        # The combined model  (stacked generator and discriminator)\n","        # Trains the generator to fool the discriminator\n","        self.combined = Model(z, validity)\n","        self.combined.compile(loss='binary_crossentropy', optimizer=optimizer)\n","\n","\n","    def build_generator(self):\n","\n","        model = Sequential()\n","\n","        model.add(Dense(256, input_dim=self.latent_dim))\n","        model.add(LeakyReLU(alpha=0.2))\n","        model.add(BatchNormalization(momentum=0.8))\n","        model.add(Dense(512))\n","        model.add(LeakyReLU(alpha=0.2))\n","        model.add(BatchNormalization(momentum=0.8))\n","        model.add(Dense(1024))\n","        model.add(LeakyReLU(alpha=0.2))\n","        model.add(BatchNormalization(momentum=0.8))\n","        model.add(Dense(np.prod(self.img_shape), activation='tanh'))\n","        model.add(Reshape(self.img_shape))\n","\n","        model.summary()\n","\n","        noise = Input(shape=(self.latent_dim,))\n","        img = model(noise)\n","\n","        return Model(noise, img)\n","\n","    def build_discriminator(self):\n","\n","        model = Sequential()\n","\n","        model.add(Flatten(input_shape=self.img_shape))\n","        model.add(Dense(512))\n","        model.add(LeakyReLU(alpha=0.2))\n","        model.add(Dense(256))\n","        model.add(LeakyReLU(alpha=0.2))\n","        model.add(Dense(1, activation='sigmoid'))\n","        model.summary()\n","\n","        img = Input(shape=self.img_shape)\n","        validity = model(img)\n","\n","        return Model(img, validity)\n","\n","    def train(self, epochs, batch_size=128, sample_interval=50):\n","\n","        # Load the dataset\n","        (X_train, _), (_, _) = mnist.load_data()\n","\n","        # Rescale -1 to 1\n","        X_train = X_train / 127.5 - 1.\n","        X_train = np.expand_dims(X_train, axis=3)\n","\n","        # Adversarial ground truths\n","        valid = np.ones((batch_size, 1))\n","        fake = np.zeros((batch_size, 1))\n","\n","        for epoch in range(epochs):\n","\n","            # ---------------------\n","            #  Train Discriminator\n","            # ---------------------\n","\n","            # Select a random batch of images\n","            idx = np.random.randint(0, X_train.shape[0], batch_size)\n","            imgs = X_train[idx]\n","\n","            noise = np.random.normal(0, 1, (batch_size, self.latent_dim))\n","\n","            # Generate a batch of new images\n","            gen_imgs = self.generator.predict(noise)\n","\n","            # Train the discriminatorч\n","            d_loss_real = self.discriminator.train_on_batch(imgs, valid)\n","            d_loss_fake = self.discriminator.train_on_batch(gen_imgs, fake)\n","            d_loss = 0.5 * np.add(d_loss_real, d_loss_fake)\n","\n","            # ---------------------\n","            #  Train Generator\n","            # ---------------------\n","\n","            noise = np.random.normal(0, 1, (batch_size, self.latent_dim))\n","\n","            # Train the generator (to have the discriminator label samples as valid)\n","            g_loss = self.combined.train_on_batch(noise, valid)\n","\n","            # If at save interval => save generated image samples\n","            if epoch % sample_interval == 0:\n","                # Plot the progress\n","                print (\"%d [D loss: %f, acc.: %.2f%%] [G loss: %f]\" % (epoch, d_loss[0], 100*d_loss[1], g_loss))\n","                self.sample_images(epoch)\n","\n","    def sample_images(self, epoch):\n","        r, c = 5, 5\n","        noise = np.random.normal(0, 1, (r * c, self.latent_dim))\n","        gen_imgs = self.generator.predict(noise)\n","\n","        # Rescale images 0 - 1\n","        gen_imgs = 0.5 * gen_imgs + 0.5\n","\n","        fig, axs = plt.subplots(r, c)\n","        cnt = 0\n","        for i in range(r):\n","            for j in range(c):\n","                axs[i,j].imshow(gen_imgs[cnt, :,:,0], cmap='gray')\n","                axs[i,j].axis('off')\n","                cnt += 1\n","        fig.savefig(\"images/%d.png\" % epoch)\n","        plt.close()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"SEr7U1LcHSj3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609416283028,"user_tz":-180,"elapsed":1267,"user":{"displayName":"Владимир Четвериков","photoUrl":"","userId":"14128665642018974813"}},"outputId":"e00c66f2-58f5-4394-bf95-4b9aadec7e98"},"source":["gan = GAN()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","flatten (Flatten)            (None, 784)               0         \n","_________________________________________________________________\n","dense (Dense)                (None, 512)               401920    \n","_________________________________________________________________\n","leaky_re_lu (LeakyReLU)      (None, 512)               0         \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 256)               131328    \n","_________________________________________________________________\n","leaky_re_lu_1 (LeakyReLU)    (None, 256)               0         \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 1)                 257       \n","=================================================================\n","Total params: 533,505\n","Trainable params: 533,505\n","Non-trainable params: 0\n","_________________________________________________________________\n","Model: \"sequential_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","dense_3 (Dense)              (None, 256)               25856     \n","_________________________________________________________________\n","leaky_re_lu_2 (LeakyReLU)    (None, 256)               0         \n","_________________________________________________________________\n","batch_normalization (BatchNo (None, 256)               1024      \n","_________________________________________________________________\n","dense_4 (Dense)              (None, 512)               131584    \n","_________________________________________________________________\n","leaky_re_lu_3 (LeakyReLU)    (None, 512)               0         \n","_________________________________________________________________\n","batch_normalization_1 (Batch (None, 512)               2048      \n","_________________________________________________________________\n","dense_5 (Dense)              (None, 1024)              525312    \n","_________________________________________________________________\n","leaky_re_lu_4 (LeakyReLU)    (None, 1024)              0         \n","_________________________________________________________________\n","batch_normalization_2 (Batch (None, 1024)              4096      \n","_________________________________________________________________\n","dense_6 (Dense)              (None, 784)               803600    \n","_________________________________________________________________\n","reshape (Reshape)            (None, 28, 28, 1)         0         \n","=================================================================\n","Total params: 1,493,520\n","Trainable params: 1,489,936\n","Non-trainable params: 3,584\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"QdgeeExSHSkG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1609416702278,"user_tz":-180,"elapsed":417670,"user":{"displayName":"Владимир Четвериков","photoUrl":"","userId":"14128665642018974813"}},"outputId":"d249cfac-433b-411d-c190-4d593dc28378"},"source":["gan.train(3000)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","11493376/11490434 [==============================] - 0s 0us/step\n","0 [D loss: 0.586106, acc.: 57.42%] [G loss: 0.534454]\n","50 [D loss: 0.017932, acc.: 100.00%] [G loss: 3.919724]\n","100 [D loss: 0.066754, acc.: 98.83%] [G loss: 3.616072]\n","150 [D loss: 0.092257, acc.: 99.61%] [G loss: 3.388383]\n","200 [D loss: 0.716653, acc.: 59.38%] [G loss: 1.703940]\n","250 [D loss: 0.697624, acc.: 48.83%] [G loss: 0.796791]\n","300 [D loss: 0.677267, acc.: 48.05%] [G loss: 0.626352]\n","350 [D loss: 0.643108, acc.: 48.83%] [G loss: 0.655017]\n","400 [D loss: 0.648128, acc.: 53.91%] [G loss: 0.693046]\n","450 [D loss: 0.634107, acc.: 61.33%] [G loss: 0.712717]\n","500 [D loss: 0.654743, acc.: 55.47%] [G loss: 0.743472]\n","550 [D loss: 0.621439, acc.: 63.67%] [G loss: 0.764868]\n","600 [D loss: 0.603661, acc.: 70.31%] [G loss: 0.775822]\n","650 [D loss: 0.605608, acc.: 69.53%] [G loss: 0.791718]\n","700 [D loss: 0.633369, acc.: 60.94%] [G loss: 0.807381]\n","750 [D loss: 0.599647, acc.: 68.75%] [G loss: 0.928957]\n","800 [D loss: 0.603659, acc.: 74.22%] [G loss: 0.876793]\n","850 [D loss: 0.615432, acc.: 71.09%] [G loss: 0.995902]\n","900 [D loss: 0.580924, acc.: 76.17%] [G loss: 0.918294]\n","950 [D loss: 0.572023, acc.: 76.95%] [G loss: 1.078862]\n","1000 [D loss: 0.613473, acc.: 68.75%] [G loss: 1.014525]\n","1050 [D loss: 0.549243, acc.: 82.03%] [G loss: 1.040730]\n","1100 [D loss: 0.537710, acc.: 79.69%] [G loss: 1.063521]\n","1150 [D loss: 0.543463, acc.: 80.47%] [G loss: 0.987132]\n","1200 [D loss: 0.591758, acc.: 73.44%] [G loss: 1.007316]\n","1250 [D loss: 0.557619, acc.: 78.91%] [G loss: 1.032823]\n","1300 [D loss: 0.564146, acc.: 73.83%] [G loss: 1.027802]\n","1350 [D loss: 0.581849, acc.: 68.75%] [G loss: 0.987734]\n","1400 [D loss: 0.533968, acc.: 76.95%] [G loss: 1.023923]\n","1450 [D loss: 0.551502, acc.: 76.17%] [G loss: 0.985159]\n","1500 [D loss: 0.554811, acc.: 74.61%] [G loss: 1.044053]\n","1550 [D loss: 0.592153, acc.: 69.92%] [G loss: 0.982765]\n","1600 [D loss: 0.557309, acc.: 77.73%] [G loss: 0.978570]\n","1650 [D loss: 0.585937, acc.: 72.66%] [G loss: 0.963752]\n","1700 [D loss: 0.544460, acc.: 77.34%] [G loss: 0.984816]\n","1750 [D loss: 0.587268, acc.: 69.53%] [G loss: 0.979883]\n","1800 [D loss: 0.608463, acc.: 67.97%] [G loss: 0.978204]\n","1850 [D loss: 0.600940, acc.: 66.80%] [G loss: 1.045774]\n","1900 [D loss: 0.591697, acc.: 70.70%] [G loss: 0.921203]\n","1950 [D loss: 0.595748, acc.: 68.36%] [G loss: 0.924638]\n","2000 [D loss: 0.572988, acc.: 73.83%] [G loss: 0.965112]\n","2050 [D loss: 0.575266, acc.: 73.83%] [G loss: 0.921478]\n","2100 [D loss: 0.615848, acc.: 66.80%] [G loss: 0.922716]\n","2150 [D loss: 0.589563, acc.: 74.22%] [G loss: 0.945157]\n","2200 [D loss: 0.590639, acc.: 72.27%] [G loss: 0.932925]\n","2250 [D loss: 0.606959, acc.: 68.75%] [G loss: 0.899114]\n","2300 [D loss: 0.609646, acc.: 66.02%] [G loss: 0.952431]\n","2350 [D loss: 0.607211, acc.: 66.41%] [G loss: 0.905483]\n","2400 [D loss: 0.591786, acc.: 73.83%] [G loss: 0.910656]\n","2450 [D loss: 0.614161, acc.: 69.92%] [G loss: 0.888065]\n","2500 [D loss: 0.593578, acc.: 73.83%] [G loss: 0.906828]\n","2550 [D loss: 0.544607, acc.: 77.73%] [G loss: 0.958389]\n","2600 [D loss: 0.611377, acc.: 64.84%] [G loss: 0.917898]\n","2650 [D loss: 0.576723, acc.: 75.00%] [G loss: 0.941541]\n","2700 [D loss: 0.620859, acc.: 68.36%] [G loss: 0.940188]\n","2750 [D loss: 0.613955, acc.: 67.97%] [G loss: 0.918890]\n","2800 [D loss: 0.628674, acc.: 67.19%] [G loss: 0.916819]\n","2850 [D loss: 0.609426, acc.: 68.75%] [G loss: 0.907689]\n","2900 [D loss: 0.612405, acc.: 71.48%] [G loss: 0.917119]\n","2950 [D loss: 0.637832, acc.: 62.11%] [G loss: 0.907021]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"PvG1bhHLHSkR"},"source":[""],"execution_count":null,"outputs":[]}]}